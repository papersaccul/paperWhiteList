import { CommandInteraction, ChannelType, EmbedBuilder, ButtonBuilder, ButtonStyle, ActionRowBuilder, PermissionFlagsBits, 
         ModalBuilder, ButtonInteraction, TextInputBuilder, TextInputStyle, ModalSubmitInteraction, MessageComponentInteraction} from "discord.js";
import { Discord, Slash, ButtonComponent, ModalComponent } from "discordx";
import * as dotenv from 'dotenv';
import { ConfigManager } from '../utils/FormConfig';

dotenv.config();

interface Config {
    FormResponse?: {
        [guildId: string]: {
            channelId: string;
        };
    };
}

@Discord()
abstract class SetupCommand {

    @Slash({ name: "setup", description: "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫" })
    async setup(interaction: CommandInteraction): Promise<void> {
        
        await interaction.deferReply();
        
        let applyChannel = await interaction.guild?.channels.fetch(interaction.channelId);
        if (!applyChannel || applyChannel.type !== ChannelType.GuildText) {
            await interaction.editReply("–ö–∞–Ω–∞–ª –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–≤—ã–º –∫–∞–Ω–∞–ª–æ–º.");
            return;
        }

        if (interaction.memberPermissions?.has(PermissionFlagsBits.ManageRoles)) {

            let btnWhiteList = new ActionRowBuilder<ButtonBuilder>().addComponents(
                new ButtonBuilder()
                    .setStyle(ButtonStyle.Primary)
                    .setCustomId("ap_apply")
                    .setLabel("–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É")
                    .setEmoji("üìë"),

            );

            await applyChannel.send({
                embeds: [
                    new EmbedBuilder()
                        .setColor("#00e5ff")
                        .setThumbnail("https://cdn.discordapp.com/attachments/762837041955733554/1216395187090231346/chilltown_logo_trsp.png?ex=66003b4c&is=65edc64c&hm=4983b5fb8150f7007f91f2d70dea86e72ed81b35d85b6621902f77f74ccb2bdf&")
                        .setTitle(`–î–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è - –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ–±–æ–ª—å—à—É—é –∞–Ω–∫–µ—Ç—É –Ω–∏–∂–µ.`)
                ],
                components: [btnWhiteList],
            });

            await interaction.editReply({
                content: `> –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ ${applyChannel}`,
            });

        } else {
            await interaction.editReply({
                content: `–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.`,
            });
        }
    }

    @ButtonComponent({ id: "ap_apply" })
    async handleApplyButton(interaction: ButtonInteraction): Promise<void> {

            const modal = new ModalBuilder()
                .setTitle("–ê–Ω–∫–µ—Ç–∞ –≤ ChillTown")
                .setCustomId("CTform")
    
            const nickInputComponent = new TextInputBuilder()
                .setCustomId("nickField")
                .setLabel("–í–∞—à –Ω–∏–∫ –Ω–∞ dreamscape")
                .setStyle(TextInputStyle.Short)
                .setPlaceholder("Steve")
    
            const ageInputComponent = new TextInputBuilder()
                .setCustomId("ageField")
                .setLabel("–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç")
                .setStyle(TextInputStyle.Short)
                .setPlaceholder("21")
    
            const weekOnlineComponent = new TextInputBuilder()
                .setCustomId("weekOnlineField")
                .setLabel("–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é –≤—ã –ø—Ä–æ–≤–æ–¥–∏—Ç–µ –≤ –∏–≥—Ä–µ?")
                .setStyle(TextInputStyle.Short)
                .setPlaceholder("15-30")
    
            const didKnowComponent = new TextInputBuilder()
                .setCustomId("didKnowField")
                .setLabel("–ö–∞–∫ –≤—ã —É–∑–Ω–∞–ª–∏ –æ –Ω–∞—à–µ–º –≥–æ—Ä–æ–¥–µ?")
                .setStyle(TextInputStyle.Short)
                .setPlaceholder("–° —Å–∞–π—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞")
    
            const beDoingComponent = new TextInputBuilder()
                .setCustomId("beDoingField")
                .setLabel("–ß–µ–º –≤—ã –±—É–¥–µ—Ç–µ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –≤ –Ω–∞—à–µ–º –≥–æ—Ä–æ–¥–µ?")
                .setStyle(TextInputStyle.Short)
                .setPlaceholder("C—Ç—Ä–æ–∏—Ç—å –¥–æ–º–∞")
    
            const rows = [
                new ActionRowBuilder<TextInputBuilder>().addComponents(nickInputComponent),
                new ActionRowBuilder<TextInputBuilder>().addComponents(ageInputComponent),
                new ActionRowBuilder<TextInputBuilder>().addComponents(weekOnlineComponent),
                new ActionRowBuilder<TextInputBuilder>().addComponents(didKnowComponent),
                new ActionRowBuilder<TextInputBuilder>().addComponents(beDoingComponent),
            ];

            modal.addComponents(...rows);
    
            interaction.showModal(modal);
    }
    @ModalComponent({ id: "CTform" })
    async handleCTform(interaction: ModalSubmitInteraction): Promise<void> {
        const guildId = interaction.guildId;
        const channelId = ConfigManager.getFormResponseConfig(guildId as string);

        if (!channelId) {
            await interaction.reply({ content: "–ö–∞–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω.", ephemeral: true });
            return;
        }

        const channel = await interaction.guild?.channels.fetch(channelId);
        if (!channel || !channel.isTextBased()) {
            await interaction.reply({ content: "–ö–∞–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω.", ephemeral: true });
            return;
        }

        const fields = interaction.fields;
        const embed = new EmbedBuilder()
            .setTitle("–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –≤ ChillTown")
            .setAuthor({ name: interaction.user.username, iconURL: interaction.user.avatarURL() ?? undefined })            
            .setFooter({ text: `ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${interaction.user.id}` })
            .addFields(
                { name: "–ù–∏–∫ –Ω–∞ dreamscape", value: fields.getTextInputValue("nickField"), inline: true },
                { name: "–í–æ–∑—Ä–∞—Å—Ç", value: fields.getTextInputValue("ageField"), inline: true },
                { name: "–ß–∞—Å—ã –≤ –Ω–µ–¥–µ–ª—é", value: fields.getTextInputValue("weekOnlineField"), inline: true },
                { name: "–ö–∞–∫ —É–∑–Ω–∞–ª–∏ –æ –Ω–∞—Å", value: fields.getTextInputValue("didKnowField"), inline: true },
                { name: "–ü–ª–∞–Ω—ã –≤ –≥–æ—Ä–æ–¥–µ", value: fields.getTextInputValue("beDoingField"), inline: true }
            )
            .setColor("#0099ff");
        const acceptButton = new ButtonBuilder()
            .setCustomId(`accept_${interaction.user.id}`)
            .setLabel("–ü—Ä–∏–Ω—è—Ç—å")
            .setStyle(ButtonStyle.Success);

        const rejectButton = new ButtonBuilder()
            .setCustomId(`reject_${interaction.user.id}`)
            .setLabel("–û—Ç–∫–ª–æ–Ω–∏—Ç—å")
            .setStyle(ButtonStyle.Danger);

        const actionRow = new ActionRowBuilder<ButtonBuilder>()
            .addComponents(acceptButton, rejectButton);

        await channel.send({ embeds: [embed], components: [actionRow] });

        await interaction.reply({
            content: "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.",
            ephemeral: true,
        });
        const messageId = channel.lastMessageId;

        const filter = (i: MessageComponentInteraction) => {
            return i.isButton() && 
                   (i.customId.includes(`accept_`) || i.customId.includes(`reject_`)) && 
                   i.message.id === messageId;
        };

        const collector = channel.createMessageComponentCollector({ filter, time: 6000000 });

        collector.on('collect', async i => {
            if (!i.isButton()) return;
            const [action, userId] = i.customId.split('_');
            const user = await i.client.users.fetch(userId);
            const guildMember = await interaction.guild?.members.fetch(userId);
            const message = i.message;
            let embed;

            if (action === 'accept') {
                await message.edit({ content: `# –ò–≥—Ä–æ–∫ ${userId} –ø—Ä–∏–Ω—è—Ç –≤ –≥–æ—Ä–æ–¥.`, components: [] });

                const role = interaction.guild?.roles.cache.find(r => r.id === "1216828560057041076"); // —Ä–æ–ª—å –≤–∏–¥–∞ –Ω–∞ –∂–∏—Ç–µ–ª—å—Å—Ç–≤–æ
                if (role) {
                    await guildMember?.roles.add(role).catch(console.error);
                }

                embed = new EmbedBuilder()
                    .setTitle("–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞")
                    .setDescription(`–ù–∞ –ø–µ—Ä–≤–æ–µ –≤—Ä–µ–º—è –≤–∞–º –≤—ã–¥–∞–Ω –≤–∏–¥ –Ω–∞ –∂–∏—Ç–µ–ª—å—Å—Ç–≤–æ. \n –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –≥–æ—Ä–æ–¥ –≤ [–ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ](https://dreamscape.su/pc/) \n\n –¢–∞–∫ –∂–µ –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —Ñ–æ—Ä—É–º–æ–º <#1213190922284568597>`)
                    .setColor("#00FF00");
            } else if (action === 'reject') {
                await message.edit({ content: `# –ó–∞—è–≤–∫–∞ –∏–≥—Ä–æ–∫–∞ ${userId} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.`, components: [] });
                
                const role = interaction.guild?.roles.cache.find(r => r.id === "1216830076931543152"); // —Ä–æ–ª—å –Ω–µ–ø—Ä–∏–Ω—è—Ç–æ–π –∑–∞—è–≤–∫–∏
                if (role) {
                    await guildMember?.roles.add(role).catch(console.error);
                }

                embed = new EmbedBuilder()
                    .setTitle("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
                    .setDescription(`–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤ ChillTown –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.`)
                    .setColor("#FF0000");
            }

            if (embed) {
                await user.send({ embeds: [embed] }).catch(console.error);
            } else {
                console.error("–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π embed");
            }        
        });
    }
}
